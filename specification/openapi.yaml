openapi: 3.0.1
info:
  title: CyberNexVpn API
  version: '1.0'
paths:
  /api/v1/telegram/auth:
    post:
      tags:
        - auth
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramAuthRequest'
        required: true
      responses:
        '200':
          description: successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramAuthResponse'
        '403':
          description: Forbidden - no access token

  /api/v1/user/{userId}/token:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '403':
          description: Forbidden - no access token
        '404':
          description: User not found

  /api/v1/user/current:
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - no access token

  /api/v1/transaction-history:
    get:
      tags:
        - transaction
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '403':
          description: Forbidden - no access token

  /api/v1/transaction-history-file:
    get:
      tags:
        - transaction
      security:
        - bearerAuth: []
      responses:
        200:
          description: successfull operation
          content:
            file:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - no access token

  /api/v1/user/device:
    post:
      tags:
        - user-device
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedObject'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - no access token

    get:
      tags:
        - user-device
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        '403':
          description: Forbidden - no access token

  /api/v1/device/{deviceId}:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - device
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '403':
          description: Forbidden - no access token
        '404':
          description: Device not found

    patch:
      tags:
        - device
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceRequest'
      responses:
        200:
          description: successful operation
        '403':
          description: Forbidden - no access token
        '404':
          description: Device not found

    delete:
      tags:
        - device
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
        '403':
          description: Forbidden - no access token
        '404':
          description: Device not found

  /api/v1/device/{deviceId}/qr:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - device
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            file:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - no access token
        '404':
          description: Device not found

  /api/v1/device/{deviceId}/config:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - device
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            file:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden - no access token
        '404':
          description: Device not found

  /api/v1/device/{deviceId}/renew-subscription:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: integer
    post:
      tags:
        - device
      security:
        - bearerAuth: []
      description: Возобновление подписки в случае, если устройство было отключено
      responses:
        200:
          description: successful operation
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - no access token
        '404':
          description: Device not found

  /api/v1/device/{deviceId}/stop-subscription:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: integer
    post:
      tags:
        - device
      security:
        - bearerAuth: []
      description: Отключение автопродления подписки
      responses:
        200:
          description: successful operation
        '403':
          description: Forbidden - no access token
        '404':
          description: Device not found

  /api/v1/device/{deviceId}/restart-subscription:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: integer
    post:
      tags:
        - device
      security:
        - bearerAuth: []
      description: Возобновление автосписания средств, если устройство все еще активно, но было отключено автопродление
      responses:
        200:
          description: successful operation
        '403':
          description: Forbidden - no access token
        '404':
          description: Device not found

  /api/v1/payment:
    post:
      tags:
        - payment
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePaymentResponse'
        '403':
          description: Forbidden - no access token

  /api/v1/payment/{paymentId}:
    get:
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - payment
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Payment'
        '403':
          description: Forbidden - no access token
        '404':
          description: Payment not found

  /api/v1/promo-code:
    post:
      tags:
        - promo-code
      security:
        - bearerAuth: []
      requestBody:
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/PromoCodeRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/CreatePromoCodeResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - no access token

  /api/v1/allowed-servers:
    get:
      tags:
        - server
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '403':
          description: Forbidden - no access token

  /api/v1/consts/subscription-price:
    get:
      tags:
        - consts
      security:
        - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: integer
        '403':
          description: Forbidden - no access token

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    TelegramAuthRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/AuthUser'

    CreateDeviceRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        server:
          type: integer

    UpdateDeviceRequest:
      type: object
      properties:
        name:
          type: string

    CreatePaymentRequest:
      type: object
      properties:
        value:
          type: integer

    PromoCodeRequest:
      type: object
      properties:
        name:
          type: string

    TelegramAuthResponse:
      type: object
      properties:
        new_user:
          type: boolean
        token:
          type: string

    CreatePaymentResponse:
      type: object
      properties:
        id:
          type: integer
        link:
          type: string

    CreatePromoCodeResponse:
      type: object
      properties:
        value:
          type: integer

    AuthUser:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
        photo_url:
          type: string
          nullable: true
        auth_date:
          type: integer
        hash:
          type: string
      required:
        - id
        - hash
        - auth_date

    AuthToken:
      type: object
      properties:
        token:
          type: string
      required:
        - token

    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
        isSuperuser:
          type: boolean
        balance:
          type: integer
        inviter:
          type: integer
          nullable: true
        invitationLink:
          type: string
          description: Реферальная ссылка пользователя

    Transaction:
      type: object
      properties:
        id:
          type: integer
        value:
          type: integer
        isCredit:
          type: boolean
        timestamp:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - startBalance
            - fillUpBalance
            - addDevice
            - renewSubscription
            - promoCode
            - invitation
            - editByAdmin
        promoCode:
          type: string
          description: Если данная транзакция результат применения промокода, то здесь передается его значение
          nullable: true
        payment:
          type: integer
          description: Если данная транзакция результат пополнения баланса через платежную систему, то здесь передается id платежа
          nullable: true

    Payment:
      type: object
      properties:
        id:
          type: string
        value:
          type: integer
        status:
          type: string
          enum:
            - pending
            - canceled
            - succeeded
        createdAt:
          type: string
          format: date-time

    Device:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        active:
          type: boolean
        willBeRenewed:
          type: boolean
          description: Будет ли продлена подписка для этого устройства после окончания ее дейсвтия
        creationTime:
          type: string
          format: datetime
        endDate:
          type: string
          format: date

    Server:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    CreatedObject:
      properties:
        id:
          type: integer

    Error:
      properties:
        type:
          type: integer
        message:
          type: string